const Discord = require("discord.js"); 
const client = new Discord.Client(); 
const config = require("./config.json");
const db = require("quick.db");

client.login(config.token);


 Rules = new Discord.MessageEmbed()

        .setTitle('Rules')
        .setDescription(`<a:HypeFoguitor:864594805832548352> Any violation of the rules found at https://discordapp.com/terms will result in a ban.\n<a:HypeFoguitor:864594805832548352> It is prohibited to send multiple identical, very similar or unnecessarily long messages.\n<a:HypeFoguitor:864594805832548352> The use of alternative accounts to circumvent punishments is expressly prohibited.\n<a:HypeFoguitor:864594805832548352> Prejudice of any kind will not be tolerated. Remembering that this includes apology for movements that have racist, homophobic or any type of discrimination ideals.\n<a:HypeFoguitor:864594805832548352> Immediate ban for anyone using any type of NSFW content (+18).\n<a:HypeFoguitor:864594805832548352> It is forbidden to stalk and/or disclose photos or personal information of members of the server, without their prior written and verifiable authorization.\n<a:HypeFoguitor:864594805832548352> Immediate ban for those who send scams, ip loggers or links/pages/files like that.\n<a:HypeFoguitor:864594805832548352> Don't put special characters in your nick, it will impair moderation.\n<a:HypeFoguitor:864594805832548352> It is strictly forbidden to put music/use voicemod/scream or make any kind of uncomfortable sound in the voice rooms.\n<a:HypeFoguitor:864594805832548352> Forbidden any kind of photo / nick the same, as they are reasons to encourage people to make RAID.\n<a:HypeFoguitor:864594805832548352> Prohibited the disclosure of "elo jobs" (when someone offers or charges to increase your rank in a game).\n<a:HypeFoguitor:864594805832548352> It is forbidden to use terms that refer to pedophilia, an example would be the term "loli", as well as conversations related to it (the famous "rp" are included in this list).`)

.setColor("fc8787")
.setImage("https://cdn.discordapp.com/attachments/850766379984617503/859849357632208936/gifgit.gif")

        client.on("message", (msg) => {
    if (msg.content == "dl.rules") { 
     msg.channel.send(Rules)
   }})


   let Staff = new Discord.MessageEmbed()

   .setTitle('How to be a staff of this server')
   .setDescription(`<a:HypeFoguitor:864594805832548352> If you have the Discord Staff Badge or the Certified Moderator Badge you will automatically be staff.\n<a:HypeFoguitor:864594805832548352> Tell us your age and your experience being staff.\n<a:HypeFoguitor:864594805832548352> Have you been a server staff before?\n<a:HypeFoguitor:864594805832548352> Have you been a server staff before?`)

.setColor("fc8787")
.setImage("https://cdn.discordapp.com/attachments/797953714311921704/844268290197028884/image0-23.png")

   client.on("message", (msg) => {
if (msg.content == "dl.staff") { //Demora não, vou replicar do meu bot e por no teu perai
msg.channel.send(Staff)
}}) 

client.on("guildMemberAdd", (member) => {
    let ferinha_canal_de_boas_vindas = db.get(`ferinha_boas_vindas_${member.guild.id}`);
    let ferinha_contador = member.guild.memberCount;
    let ferinha_servidor = member.guild.name;
  
    if (!ferinha_canal_de_boas_vindas) return;
  
    let msg_embed_ferinha = new Discord.MessageEmbed() //mensagem embed
    .setAuthor(`${member.user.tag}`, member.user.avatarURL())
    .setDescription(`Welcome ${member.user} to server **${ferinha_servidor}**! \nAtualmente estamos com \`${ferinha_contador}\` membros!`)
    .setColor("fc8787")
    .setThumbnail(member.user.avatarURL());
  
    let msg_not_embed_ferinha = `Welcome ${member.user}! \nActually we are with \`${ferinha_contador}\` members!`; //mensagem não embed
  
    client.channels.cache.get(ferinha_canal_de_boas_vindas).send(msg_embed_ferinha)
  });



const ytdl = require('ytdl-core');
const ytSearch = require('yt-search');

//Global queue for your bot. Every server will have a key and value pair in this map. { guild.id, queue_constructor{} }
const queue = new Map();

module.exports = {
    name: 'play',
    aliases: ['skip', 'stop'], //We are using aliases to run the skip and stop command follow this tutorial if lost: https://www.youtube.com/watch?v=QBUJ3cdofqc
    cooldown: 0,
    description: 'Advanced music bot',
    async execute(message,args, cmd, client, Discord){


        //Checking for the voicechannel and permissions (you can add more permissions if you like).
        const voice_channel = message.member.voice.channel;
        if (!voice_channel) return message.channel.send('You need to be in a channel to execute this command!');
        const permissions = voice_channel.permissionsFor(message.client.user);
        if (!permissions.has('CONNECT')) return message.channel.send('You dont have the correct permissins');
        if (!permissions.has('SPEAK')) return message.channel.send('You dont have the correct permissins');

        //This is our server queue. We are getting this server queue from the global queue.
        const server_queue = queue.get(message.guild.id);

        //If the user has used the play command
        if (cmd === 'play'){
            if (!args.length) return message.channel.send('You need to send the second argument!');
            let song = {};

            //If the first argument is a link. Set the song object to have two keys. Title and URl.
            if (ytdl.validateURL(args[0])) {
                const song_info = await ytdl.getInfo(args[0]);
                song = { title: song_info.videoDetails.title, url: song_info.videoDetails.video_url }
            } else {
                //If there was no link, we use keywords to search for a video. Set the song object to have two keys. Title and URl.
                const video_finder = async (query) =>{
                    const video_result = await ytSearch(query);
                    return (video_result.videos.length > 1) ? video_result.videos[0] : null;
                }

                const video = await video_finder(args.join(' '));
                if (video){
                    song = { title: video.title, url: video.url }
                } else {
                     message.channel.send('Error finding video.');
                }
            }

            //If the server queue does not exist (which doesn't for the first video queued) then create a constructor to be added to our global queue.
            if (!server_queue){

                const queue_constructor = {
                    voice_channel: voice_channel,
                    text_channel: message.channel,
                    connection: null,
                    songs: []
                }
                
                //Add our key and value pair into the global queue. We then use this to get our server queue.
                queue.set(message.guild.id, queue_constructor);
                queue_constructor.songs.push(song);
    
                //Establish a connection and play the song with the vide_player function.
                try {
                    const connection = await voice_channel.join();
                    queue_constructor.connection = connection;
                    video_player(message.guild, queue_constructor.songs[0]);
                } catch (err) {
                    queue.delete(message.guild.id);
                    message.channel.send('There was an error connecting!');
                    throw err;
                }
            } else{
                server_queue.songs.push(song);
                return message.channel.send(`👍 **${song.title}** added to queue!`);
            }
        }

        else if(cmd === 'skip') skip_song(message, server_queue);
        else if(cmd === 'stop') stop_song(message, server_queue);
    }
    
}

const video_player = async (guild, song) => {
    const song_queue = queue.get(guild.id);

    //If no song is left in the server queue. Leave the voice channel and delete the key and value pair from the global queue.
    if (!song) {
        song_queue.voice_channel.leave();
        queue.delete(guild.id);
        return;
    }
    const stream = ytdl(song.url, { filter: 'audioonly' });
    song_queue.connection.play(stream, { seek: 0, volume: 0.5 })
    .on('finish', () => {
        song_queue.songs.shift();
        video_player(guild, song_queue.songs[0]);
    });
    await song_queue.text_channel.send(`🎶 Now playing **${song.title}**`)
}

const skip_song = (message, server_queue) => {
    if (!message.member.voice.channel) return message.channel.send('You need to be in a channel to execute this command!');
    if(!server_queue){
        return message.channel.send(`There are no songs in queue 😔`);
    }
    server_queue.connection.dispatcher.end();
}

const stop_song = (message, server_queue) => {
    if (!message.member.voice.channel) return message.channel.send('You need to be in a channel to execute this command!');
    server_queue.songs = [];
    server_queue.connection.dispatcher.end();
}